package chapter24;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public class StreamMethodRef {
	public static void main(String[] args) {
		// 스트림 메소드 종류
		// 1. filter()
		// - 주어진 조건에 맞는 요소들로 구성된 스트림을 반환
		List<Integer> numList = Arrays.asList(1, 2, 3, 4, 5);
		List<Integer> evenNum = numList.stream()
								.filter(num -> num % 2 == 0)
								.collect(Collectors.toList());
		System.out.println("filter(): " + evenNum);
		
		// 2. map()
		// - 각 요소를 특정 함수에 적용하여 새로운 요소를 매핑 후, 새로운 스트림 반환
		List<String> nameList = Arrays.asList("홍길동", "김길동", "박길동");
		List<Integer> namelen = nameList.stream()
								.map(String::length)
								.collect(Collectors.toList());
		System.out.println("map(): " + namelen);
		
		// 3. flatMap()
		// - 각 요소를 스트림으로 매핑하고, 이를 단일 스트림으로 평면화하여 반환
		
		// 4. forEach()
		// - 각 요소에 대해 특정 작업을 실행
		nameList.stream()
			.forEach(System.out::println); // nameList에 있는 이름 하나씩 출력
		
		// 5. collect(Collectors)
		// - 스트림의 요소를 수집하여 리스트, 맵 등의 자료구조를 반환
		String concatenated = nameList.stream()
								.collect(Collectors.joining(", "));
		System.out.println("collect(): " + concatenated); // 문자열 리스트를 쉼표로 연결하여 하나의 문자열로 출력
		
		// 6. reduce()
		// - 스트림의 요소를 하나로 줄이는 연산을 수행
		// - e.g., 모든 요소를 합산하거나 최댓값 or 최솟값 찾기 가능
		int sum = numList.stream()
						.reduce(0, Integer::sum);
		System.out.println("reduce(): " + sum);
		
		// 7. distinct()
		// - 중복된 요소를 제거한 스트림을 반환
		List<Integer> withDuplicates = Arrays.asList(1, 2, 2, 3, 3, 4, 5);
		List<Integer> distinctNumbers = withDuplicates.stream()
										.distinct()
										.collect(Collectors.toList());
		System.out.println("distinct(): " + distinctNumbers);
		
		// 8. sorted()
		// - 스트림 요소를 정렬한 새로운 스트림을 반환
		List<Integer> unsorted = Arrays.asList(3, 1, 4, 5, 2);
		List<Integer> sortedNumbers = unsorted.stream()
									.sorted()
									.collect(Collectors.toList());
		System.out.println("sorted(): " + sortedNumbers);

		// 9. limit()
		// - 스트림 요소의 개수를 제한
		List<Integer> limited = numList.stream()
								.limit(3)
								.collect(Collectors.toList());
		System.out.println("limited(): " + limited);
		
		// 10. skip()
		// - 처음 몇개의 요소를 건너뛴 후, 나머지 요소로 이루어진 새로운 스트림을 반환
		List<Integer> skipped = numList.stream()
								.skip(2)
								.toList();
		System.out.println("skipped(): " + skipped);
		
		// 11. anyMathch(), allMatch(), noneMatch()
		// - 각각 하나 이상의 요소가 주어진 조건과 일치하는지, 
		//   모든 요소가 조건과 일치하는지, 하나도 일치하지 않는지를 검사
		// 12. findFirst(), findAny()
		// - 스트림에서 첫번째 요소 혹은 임의의 요소를 찾아서 optional 객체로 반환
		// 13. min(), max()
		// - 스트림에서 최솟값 or 최댓값을 찾아서 optional 객체로 반환
		// 14. toArray()
		// - 스트림의 요소를 배열로 반환
		// parallel()
		// sequential()
		// concat()
		// peek()
		// forEachOrdered()
		// dropWhile(), takeWhile()
		// groupingBy(), partitioningBy()
		// toSet(), toMap(), toCollection()
		// flatMapToInt(), flatMapToDouble(), flatMapToLong()
		// summaryStatistics()
		// empty()
		// iterate()
		// generate()
		
		
		
	}
}
